generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  bio           String?
  lokasi        String?
  linkWhatsapp  String?
  role          Role         @default(PETANI)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  proyekTani    ProyekTani[]
  pesanan       Pesanan[]    @relation("PesananPembeli")
  comments      Comment[]
  likes         Like[]
}

model ProyekTani {
  id          String          @id @default(cuid())
  namaProyek  String
  deskripsi   String
  lokasiLahan String
  status      StatusProyek    @default(PERSIAPAN)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  petaniId    String
  petani      User            @relation(fields: [petaniId], references: [id], onDelete: Cascade)
  updates     FarmingUpdate[]
  produk      Produk[]
  fase        FaseProyek[]
  @@index([petaniId])
}

model FarmingUpdate {
  id           String     @id @default(cuid())
  judul        String
  deskripsi    String
  fotoUrl      String[]
  createdAt    DateTime   @default(now())
  proyekTaniId String
  proyekTani   ProyekTani @relation(fields: [proyekTaniId], references: [id], onDelete: Cascade)
  comments     Comment[]
  likes        Like[]

  @@index([proyekTaniId])
  @@index([createdAt]) // For sorting by recent
}

model Comment {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  farmingUpdateId String
  farmingUpdate  FarmingUpdate @relation(fields: [farmingUpdateId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([farmingUpdateId])
  @@index([createdAt]) // For sorting by recent
}

model Like {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  farmingUpdateId String
  farmingUpdate  FarmingUpdate @relation(fields: [farmingUpdateId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, farmingUpdateId]) // Prevent duplicate likes
  @@index([userId])
  @@index([farmingUpdateId])
}

model FaseProyek {
  id           String   @id @default(cuid())
  nama         String   
  slug         String   
  cerita       String   
  gambar       String[]
  urutan       Int      
  proyekTaniId String
  proyekTani   ProyekTani @relation(fields: [proyekTaniId], references: [id], onDelete: Cascade)
  @@unique([proyekTaniId, slug]) 
  @@index([proyekTaniId])
}

model Produk {
  id            String       @id @default(cuid())
  namaProduk    String
  deskripsi     String
  fotoUrl       String[]
  harga         Int
  unit          String
  stokTersedia  Float
  status        StatusProduk @default(TERSEDIA)
  estimasiPanen DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  proyekTaniId  String
  proyekTani    ProyekTani   @relation(fields: [proyekTaniId], references: [id], onDelete: Cascade)
  itemsPesanan  OrderItem[]

  @@index([proyekTaniId])
}

model Pesanan {
  id               String        @id @default(cuid())
  totalHarga       Int
  status           StatusPesanan @default(MENUNGGU_PEMBAYARAN)
  alamatPengiriman String?
  catatanPembeli   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  pembeliId        String
  pembeli          User          @relation("PesananPembeli", fields: [pembeliId], references: [id], onDelete: Cascade)
  items            OrderItem[]

  @@index([pembeliId])
}

model OrderItem {
  id             String  @id @default(cuid())
  jumlah         Float
  hargaSaatPesan Int
  pesananId      String
  produkId       String
  pesanan        Pesanan @relation(fields: [pesananId], references: [id], onDelete: Cascade)
  produk         Produk  @relation(fields: [produkId], references: [id], onDelete: Restrict)

  @@unique([pesananId, produkId])
  @@index([pesananId])
  @@index([produkId])
}

enum Role {
  PETANI
  PEMBELI
}

enum StatusProyek {
  PERSIAPAN
  PENANAMAN
  PERAWATAN
  PANEN
  SELESAI
}

enum StatusProduk {
  TERSEDIA
  PREORDER
  HABIS
}

enum StatusPesanan {
  MENUNGGU_PEMBAYARAN
  DIPROSES
  DIKIRIM
  SELESAI
  DIBATALKAN
}
